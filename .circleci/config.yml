version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circleciworkflow_id:
        type: string 
    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.circleciworkflow_id >>
      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.circleciworkflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.circleciworkflow_id >>

jobs:

  install-frontend-dep:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: npm install
            working_directory: ./frontend
            command: npm install
        - persist_to_workspace:
            root: .
            paths:
              - frontend/node_modules

  install-backend-dep:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: npm install
            working_directory: ./backend
            command: npm install
        - persist_to_workspace:
            root: .
            paths:
              - backend/node_modules

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          working_directory: ./backend
          command: npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Unit Test Frontend code
          working_directory: ./frontend
          command: npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Unit Test Backend code
          working_directory: ./backend
          command: npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend vulnerabilities
          working_directory: ./frontend
          command: npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend vulnerabilities
          working_directory: ./backend
          command: npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - install-frontend-dep
      - install-backend-dep
      - build-frontend:
          requires:
            - install-frontend-dep
      - build-backend:
          requires:
            - install-backend-dep
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend 
            - scan-frontend
            - scan-backend

