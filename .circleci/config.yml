version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      circleciworkflow_id:
        type: string 
    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.circleciworkflow_id >>
      - run:
          name: Destroy frontend environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.circleciworkflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.circleciworkflow_id >>
  revert-migrations:
    description: Revert the last migration.
    parameters:
      circleciworkflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            MIG_STATUS=$(curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/MIGRATION_STATUS_<< parameters.circleciworkflow_id >>)
            echo $MIG_STATUS
            if [[ "$MIG_STATUS" == "1" ]]
            then
              pwd
              ls -la
              npm install
              npm run migrations:revert
            fi

jobs:

  install-frontend-dep:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: npm install
            working_directory: ./frontend
            command: npm install
        - persist_to_workspace:
            root: .
            paths:
              - frontend/node_modules

  install-backend-dep:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: npm install
            working_directory: ./backend
            command: npm install
        - persist_to_workspace:
            root: .
            paths:
              - backend/node_modules

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Unit Test Frontend code
          working_directory: ./frontend
          command: npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Unit Test Backend code
          working_directory: ./backend
          command: npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend vulnerabilities
          working_directory: ./frontend
          command: npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend vulnerabilities
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure frontend infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
            cat inventory.txt
      - run:
          name: Add backend URL to kvdb
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            BACKEND_URL_VALUE=http://$BACKEND_IP:3030
            curl https://kvdb.io/3et7Wetpw1giChvRWz9DmG/BACKEND_URL -d $BACKEND_URL_VALUE
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.11-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["65:0b:c0:a7:0d:ae:75:54:c4:07:54:7a:74:08:fb:08"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status.txt
      - run:
          name: Send migration results to kvdb
          working_directory: ./backend
          command: |
            if (grep -q "has been executed successfully" migration_status.txt || grep -q "No migrations are pending" migration_status.txt)
            then
              echo "DB migration successful."
              curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "DB migration failed, please verify DB setup."
              curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7} -d '0'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/BACKEND_URL)
            echo "API_URL=${API_URL}" >> ./env
            ls -l
            cat ./env
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            ls
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.11-alpine3.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["65:0b:c0:a7:0d:ae:75:54:c4:07:54:7a:74:08:fb:08"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -v
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            sleep 20
            export BACKEND_URL=$(curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/BACKEND_URL)
            export BACKEND_RESTAPI_URL=$(echo $BACKEND_URL/api/status)
            if curl $BACKEND_RESTAPI_URL | grep "ok"; then return 0; else return 1; fi
      - run:
          name: Frontend smoke test.
          working_directory: ./frontend
          command: |
            sleep 20
            FRONT_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            if curl $FRONT_URL | grep "Welcome"; then return 0; else return 1; fi
      - destroy-environment:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Store old WorkflowID
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/WORKFLOW_ID -d $WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert-migrations:
          circleciworkflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            Old_WorkflowID=$(curl -k https://kvdb.io/3et7Wetpw1giChvRWz9DmG/WORKFLOW_ID)
            Current_WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo "Old_id     : ${Old_WorkflowID}"
            echo "Current_id : ${Current_WorkflowID}"
            if [[ "$Current_WorkflowID" != "$Old_WorkflowID" ]]
            then
              echo ""
              echo "Id's different. Time to cleanup old version"
              echo ""
              aws s3 rm "s3://udapeople-${Old_WorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${Old_WorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${Old_WorkflowID}"
            else
              echo ""
              echo "Id's same. Nothing to do"
              echo ""
            fi

workflows:
  default:
    jobs:
      - install-frontend-dep
      - install-backend-dep
      - build-frontend:
          requires:
            - install-frontend-dep
      - build-backend:
          requires:
            - install-backend-dep
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires: 
            - test-frontend
            - test-backend 
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
#      - cloudfront-update:
#          requires:
#            - smoke-test
#      - cleanup:
#          requires:
#            - cloudfront-update